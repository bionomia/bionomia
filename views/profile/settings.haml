- content_for :title, I18n.t('profile.settings')
- content_for :scripts do
  = haml :'partials/profile/scripts', layout: false, locals: { action_type: "POST" }

.row
  = haml :'partials/profile/jumbotron', layout: false, locals: { active_page: "settings" }
  .col-12.col-lg-8.mt-2
    = haml :'partials/profile/tabs', layout: false, locals: { active_page: nil }

    .citation-wrapper.mt-4
      %h4= I18n.t('profile.settings')

      - if flash[:updated]
        .alert.alert-success.alert-dismissible.fade.show.d-block{role: "alert"}
          %div
            = I18n.t('profile.updated')
          %button{type:"button", class:"close", "data-dismiss":"alert", "aria-label":"Close"}
            %span{"aria-hidden":"true"} &times;

      .card-deck
        .card
          %h5.card-header= I18n.t('profile.public_availability')
          .card-body
            %p.card-text= I18n.t('profile.make_public_message')
            .row
              .col
                %input.btn-claim{type:"checkbox", id: "toggle-public", "data-toggle":"toggle", "data-on":"#{I18n.t('profile.public')}", "data-off":"#{I18n.t('profile.private')}", "data-onstyle": "success", "data-size": "small", "data-width": "90", checked: @user.is_public?, "data-url": "/profile/visibility.json" }
              .col.text-right
                - if @user.is_public?
                  %a{href: url("/#{@user.orcid}")}
                    = I18n.t('profile.public_profile')
                    %i.fa-solid.fa-users

        .card
          %h5.card-header= I18n.t('profile.make_citable')
          .card-body
            - if !@user.made_claim?
              %p.card-text= I18n.t('profile.connect_zenodo_claim')
            - else
              - if @user.zenodo_access_token.nil?
                %p.card-text= I18n.t('profile.connect_zenodo')
                %form{action: "/auth/zenodo", method: :post}
                  %p.card-text
                    %button.btn.btn-sm.btn-outline-info= I18n.t('profile.integrate_zenodo')
                    %input{type:"hidden", name:"authenticity_token", value:"#{env['rack.session'][:csrf]}"}
              - else
                - if @user.zenodo_concept_doi
                  %p.card-text
                    = I18n.t('profile.zenodo_html', zenodo: link_to("Zenodo", "https://doi.org/#{@user.zenodo_concept_doi}"))
                  %p
                    %a{href:"https://doi.org/#{@user.zenodo_concept_doi}"}
                      %img{src:"/images/#{@user.zenodo_concept_doi}.svg"}
                  %p
                    %button.btn.btn-sm.btn-outline-danger{type: "button", "data-toggle": "modal", "data-target": "#zenodoModal"}= I18n.t('profile.disconnect')

                  #zenodoModal.modal.fade{tabindex:"-1", role:"dialog", "aria-labelledby":"zenodoModal", "aria-hidden":"true"}
                    .modal-dialog{role:"document"}
                      .modal-content
                        .modal-header
                          #zenodoLabel.modal-title= I18n.t('profile.disconnect_zenodo')
                          %button.close{type:"button", "data-dismiss":"modal", "aria-label":"Close"}
                            %span{"aria-hidden":"true"} &times;
                        .modal-body= I18n.t('profile.disconnect_warning')
                        .modal-footer
                          %button.btn.btn-sm.btn-outline-secondary{type:"button", class:"", "data-dismiss":"modal"}= I18n.t('profile.cancel')
                          %button#zenodo-disconnect.btn.btn-sm.btn-outline-danger{type:"button"}= I18n.t('profile.disconnect')
                - else
                  %p.card-text= I18n.t('profile.connect_zenodo')
                  %p.alert.alert-success
                    %i.fa-solid.fa-check-circle
                    = I18n.t('profile.zenodo_linked')

      .card-deck
        .card
          %h5.card-header= I18n.t('profile.email_notifications')
          .card-body
            - if @user.email && !@user.email.empty?
              %p.card-text= I18n.t('profile.email_procedure', email: @user.email)
              %p
                %input#toggle-mail.btn-claim{type:"checkbox", "data-toggle":"toggle", "data-on":"#{I18n.t('profile.active')}", "data-off":"#{I18n.t('profile.inactive')}", "data-onstyle": "success", "data-size": "small", checked: @user.wants_mail? }
            - else
              %p.card-text= I18n.t('profile.email_instructions')

        .card
          %h5.card-header
            YouTube
          .card-body
            %p.card-text= I18n.t('profile.youtube')
            %form{action: "/profile/settings", method: :post}
              %input{type: :hidden, name: "_method", value: 'PUT'}
              %input{type: :hidden, name: "authenticity_token", value:"#{env['rack.session'][:csrf]}"}
              %input{type: :hidden, name: "wants_mail", value:"#{@user.wants_mail?}"}
              %input{type: :hidden, name: "locale", value:"#{@user.locale}"}
              %input#youtube_id.form-control.mb-3{type: :text, name: "youtube_id", value: "#{@user.youtube_id}", placeholder: "w-rOViX3buo"}
              %input.btn.btn-sm.btn-outline-success{type: :submit, value:"#{I18n.t('profile.update')}"}

      .card-deck
        .card
          %h5.card-header
            #{I18n.t('profile.language')}
          .card-body
            %p.card-text= I18n.t('profile.language_explanation')
            %form{action: "/profile/settings", method: :post}
              %select#locale.form-control.form-select.form-select-md.d-block.mb-3{name: "locale", "aria-label":"#{I18n.t('profile.language')}"}
                %option{value: ""}= "#{I18n.t('profile.language')}"
                - locale_name_pairs.each do |lang|
                  - selected = lang[0].to_s == @user.try(:locale) ? true : false
                  %option{value: "#{lang[0]}", selected: selected}= "#{lang[1]}"
              %input{type: :hidden, name: "_method", value: 'PUT'}
              %input{type: :hidden, name: "authenticity_token", value:"#{env['rack.session'][:csrf]}"}
              %input{type: :hidden, name: "wants_mail", value:"#{@user.wants_mail?}"}
              %input{type: :hidden, name: "youtube_id", value: "#{@user.youtube_id}"}
              %input.btn.btn-sm.btn-outline-success.d-block{type: :submit, value:"#{I18n.t('profile.update')}"}

        .card
          %h5.card-header= I18n.t('profile.delete_account')
          .card-body
            %p.card-text= I18n.t('profile.permanent_delete')
            %button.btn.btn-sm.btn-outline-danger{type: "button", "data-toggle": "modal", "data-target": "#deleteModal"}= I18n.t('profile.delete')

            #deleteModal.modal.fade{tabindex:"-1", role:"dialog", "aria-labelledby":"deleteModal", "aria-hidden":"true"}
              .modal-dialog{role:"document"}
                .modal-content
                  %form.needs-validation{action: "/profile/destroy", method: :post, novalidate: true}
                    .modal-header
                      %h5#deleteLabel.modal-title= I18n.t('profile.delete_account')
                      %button.close{type:"button", "data-dismiss":"modal", "aria-label":"Close"}
                        %span{"aria-hidden":"true"} &times;
                    .modal-body
                      = I18n.t('profile.delete_warning')
                      .mt-2.form-row
                        %label{for: "reason"}= I18n.t('profile.delete_reason')
                        %textarea.w-100.form-control{name: "reason", rows: 3, required: true}
                        .invalid-feedback
                          = I18n.t('profile.delete_feedback')
                    .modal-footer
                      %button.btn.btn-sm.btn-outline-secondary{type:"button", "data-dismiss":"modal"}= I18n.t('profile.cancel')
                      %input{type: :hidden, name: "_method", value: 'DELETE'}
                      %input{type: :hidden, name:"authenticity_token", value:"#{env['rack.session'][:csrf]}"}
                      %input.btn.btn-sm.btn-outline-danger{type: :submit, value:"#{I18n.t('profile.delete')}"}
