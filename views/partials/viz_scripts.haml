- if @stats && @stats[:specimens] && ( @stats[:specimens][:identified] > 0 || @stats[:specimens][:recorded] > 0 )
  - content_for :scripts do
    %script{src: "/js/geochart-hierarchy.js"}
    %script{src: "//www.gstatic.com/charts/loader.js"}
    %script{src: "/js/jquery.throttledresize.js"}
    - recorded = @stats[:countries][:recorded].to_a.map{|a| [ a[0], country_name(a[0]), a[1] ] }.unshift(["Country", "Country Name", "#{I18n.t('charts.collected')}"])
    - identified = @stats[:countries][:identified].to_a.map{|a| [ a[0], country_name(a[0]), a[1] ] }.unshift(["Country", "Country Name", "#{I18n.t('charts.identified')}"])
    :javascript
      $(function() {
        if (!$('#chart').length) { return; }
        var countriesRecorded = #{recorded},
            countriesIdentified = #{identified},
            dateData = #{@stats[:activity_dates].to_a.unshift(["#{I18n.t('charts.year')}", "#{I18n.t('charts.collected')}", "#{I18n.t('charts.identified')}"])},
            recorded_region = "world",
            identified_region = "world",
            recorded_hierarchies = $.map(#{@stats[:countries][:recorded].keys}, function(i) {
              return [ancestors(GeoChartHierarchy, i)];
            }).filter(function (el) { return el; }),
            identified_hierarchies = $.map(#{@stats[:countries][:identified].keys}, function(i) {
              return [ancestors(GeoChartHierarchy, i)];
            }).filter(function (el) { return el; }),
            collectedMap, identifiedMap;

        function ancestors(array, id) {
          if (typeof array != 'undefined') {
            for (var i = 0; i < array.length; i++) {
              if (array[i].id == id) return [id];
              var a = ancestors(array[i].children, id);
              if (a != null) {
                a.unshift(array[i].id);
                return a;
              }
            }
          }
          return null;
        }

        function intersection() {
        	var result = [];
          var lists;

          if(arguments.length === 1) {
          	lists = arguments[0];
          } else {
          	lists = arguments;
          }

          for(var i = 0; i < lists.length; i++) {
          	var currentList = lists[i];
          	for(var y = 0; y < currentList.length; y++) {
            	var currentValue = currentList[y];
              if(result.indexOf(currentValue) === -1) {
                if(lists.filter(function(obj) { return obj.indexOf(currentValue) == -1 }).length == 0) {
                  result.push(currentValue);
                }
              }
            }
          }
          return result;
        }

        function drawVisualizations() {
          var chartData = google.visualization.arrayToDataTable(dateData),
              chart = new google.visualization.ColumnChart($('#chart')[0]),
              chartOptions = {
                title: '',
                hAxis: {
                  title: "#{I18n.t('charts.year')}",
                  format: '0000',
                  titleTextStyle: {
                    italic: false,
                    fontSize: 18,
                    bold: true
                  }
                },
                vAxis: {
                  title: "#{I18n.t('charts.number_specimens')}",
                  titleTextStyle: {
                    italic: false,
                    fontSize: 18,
                    bold: true
                  }
                },
                colors: ['#B9D4D8', '#3A7179'],
                chartArea: {
                  right: 130,
                  left: 60,
                }
              },
              mapOptions = {
                chartArea: { left: 0, top: 0, width: "100%", height: "100%" },
                colorAxis: { colors: ['#B9D4D8', '#3A7179'] },
                legend: 'none'
              };

          collectedMap = new google.visualization.GeoChart($('#map-collected')[0]);
          identifiedMap = new google.visualization.GeoChart($('#map-identified')[0]);

          google.visualization.events.addListener(chart, 'onmouseover', function(e) {
            if (e.row !== null) { $('#chart').css('cursor','pointer'); }
          });
          google.visualization.events.addListener(chart, 'onmouseout', function(e) {
            $('#chart').css('cursor','default');
          });
          google.visualization.events.addListener(chart, 'select', function(e) {
            var sel = chart.getSelection()[0];
            if (typeof sel.row !== "undefined" && sel.row !== null) {
              var yr = chartData.getValue(sel.row, 0), action = (sel.column === 1) ? "collected" : "identified";
              window.location = "#{locals[:path]}/specimens?action=" + action + "&start_year=" + yr + "&end_year=" + (parseInt(yr, 10)+5);
            }
          });

          $.each([collectedMap, identifiedMap], function() {
            var label = (this === collectedMap) ? "collected" : "identified";
            google.visualization.events.addListener(this, 'regionClick', function(e) {
              window.location = "#{locals[:path]}/specimens?action=" + label + "&country_code=" + e.region;
            });
          });

          if (dateData.length > 1) {
            chart.draw(chartData, chartOptions);
          }

          if (countriesRecorded.length > 1) {
            var intx = intersection(recorded_hierarchies);
            recorded_region = intx[intx.length - 1];
            collectedMap.draw(google.visualization.arrayToDataTable(countriesRecorded), $.extend(mapOptions, { "region": recorded_region }));
          } else {
            collectedMap.draw(google.visualization.arrayToDataTable([["None"]]), $.extend(mapOptions, { "region": recorded_region }));
          }

          if (countriesIdentified.length > 1) {
            var intx = intersection(identified_hierarchies);
            identified_region = intx[intx.length - 1];
            identifiedMap.draw(google.visualization.arrayToDataTable(countriesIdentified), $.extend(mapOptions, { "region": identified_region }));
          } else {
            identifiedMap.draw(google.visualization.arrayToDataTable([["None"]]), $.extend(mapOptions, { "region": identified_region }));
          }
        }

        google.charts.load('current', {
          packages: ['corechart', 'bar', 'geochart'],
          mapsApiKey: "#{Settings.google.api_key}"
        });
        google.charts.setOnLoadCallback(drawVisualizations);

        $(window).on("throttledresize", function(event) {
          collectedMap.clearChart();
          identifiedMap.clearChart();
          drawVisualizations();
          $.each(['collected', 'identified'], function() {
            $("#map-" + this + "-wrapper").height(collectedMap.container.offsetHeight);
          });
        });

      });
