.card.card-profile.my-3
  - if locals[:user].image_url
    .card-header.d-flex
      %div
        %img.card-img-profile.mr-2{src:"#{profile_image(locals[:user], 'medium')}", alt:"#{locals[:user].fullname}", width:48, height:48, loading:"lazy"}
      .flex-grow-1
        %h5
          // Do not use url method here becase caching breaks language-based subdomains
          = link_to locals[:user].fullname_reverse, "/#{locals[:user].identifier}"
        - if locals[:user].country
          %p.small.text-muted.mt-0.mb-0
            - country_codes = locals[:user].country_code.split("|") rescue []
            - countries = locals[:user].country.split("|") rescue []
            - countries.each_with_index do |v,i|
              = succeed (countries[i+1]) ? '; ' : '' do
                - if !country_codes[i].nil? && !country_codes[i].empty?
                  #{country_name(country_codes[i])}
                - else
                  #{v}
  - else
    .card-header
      %h5
        // Do not use url method here becase caching breaks language-based subdomains
        = link_to locals[:user].fullname_reverse, "/#{locals[:user].identifier}"
      - if locals[:user].country
        %p.small.text-muted.mt-0.mb-0
          - country_codes = locals[:user].country_code.split("|") rescue []
          - countries = locals[:user].country.split("|") rescue []
          - countries.each_with_index do |v,i|
            = succeed (countries[i+1]) ? '; ' : '' do
              - if !country_codes[i].nil? && !country_codes[i].empty?
                #{country_name(country_codes[i])}
              - else
                #{v}

  .card-body
  .card-footer
    .small.text-muted.row
      .col-12.col-md-6
        %span.badge.badge-light #{number_with_delimiter(locals[:stats][:attributions][:number])}
        #{I18n.t('card.attributed', count: locals[:stats][:attributions][:number])}
      .col-12.col-md-6.text-md-left.text-lg-right
        %span.badge.badge-light #{number_with_delimiter(locals[:stats][:attributions][:helped])}
        #{I18n.t('card.helped', count: locals[:stats][:attributions][:helped])}
